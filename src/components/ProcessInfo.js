import React, { useState } from 'react';
import Paper from '@mui/material/Paper';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import './ProcessInfo.css';

const ProcessInfo = ({ tasks, selectedTask, setSelectedTask, exportTasks, processId, callActivityVariableIds, taskVariableIds, startEventFormProperties }) => {
  const [filter, setFilter] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [button1Active, setButton1Active] = useState(false);

  const handleButtonClick = (buttonNumber) => {
    if (buttonNumber === 1) {
      setButton1Active(!button1Active);
    }
  };

  const sortedTasks = tasks.slice().sort((a, b) => a.name.localeCompare(b.name));

  const filteredTasks = sortedTasks.filter((task) => {
    if (filter === 'all') return true;
    return task.type === filter || filter === 'all';
  });

  const searchedTasks = filteredTasks.filter((task) => {
    return task.name.toLowerCase().includes(searchTerm.toLowerCase());
  });

  const handleFilterChange = (event) => {
    setFilter(event.target.value);
  };

  const handleSearch = (event) => {
    setSearchTerm(event.target.value);
  };

  const clearSelectedTask = () => {
    setSelectedTask(null);
  };

  const mapSourceToFieldName = (source) => {
    const sourceMappings = {
      'executorkey_OKTMO': '–û–ö–¢–ú–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
      'declarantType': '–¢–∏–ø –∑–∞—è–≤–∏—Ç–µ–ª—è',
      'organizationOPF': '–û–ü–§ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
      'organizationINN': '–ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
      'organizationOGRN': '–û–ì–†–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
      'organizationEmail': 'Email –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
      'organizationPhone': '–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
      'declPersonFIOSurname': '–§–∞–º–∏–ª–∏—è –∑–∞—è–≤–∏—Ç–µ–ª—è',
      'declPersonFIOFirst': '–ò–º—è –∑–∞—è–≤–∏—Ç–µ–ª—è',
      'declPersonFIOPatronymic': '–û—Ç—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–∏—Ç–µ–ª—è',
      'declPersonEmail': 'Email –∑–∞—è–≤–∏—Ç–µ–ª—è',
      'declPersonPhone': '–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞—è–≤–∏—Ç–µ–ª—è',
      'declPersonSNILS': '–°–ù–ò–õ–° –∑–∞—è–≤–∏—Ç–µ–ª—è',
      'doc_applicantIdentity_type2': '–ö–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è',
      'declPersonPDocumentSeries': '–°–µ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è',
      'declPersonPDocumentNumber': '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è',
      'declPersonPDocumentDate': '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è',
      'declPersonPDocumentIssueOrgan': '–û—Ä–≥–∞–Ω, –≤—ã–¥–∞–≤—à–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞—è–≤–∏—Ç–µ–ª—è',
      'flagRepresentative': '–Ø–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º',
      'agentFIOSurname': '–§–∞–º–∏–ª–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è',
      'agentFIOFirst': '–ò–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è',
      'agentFIOPatronymic': '–û—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è',
      'agentPDocumentSeries': '–°–µ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è',
      'agentPDocumentNumber': '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è',
      'agentPDocumentDate': '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è',
      'agentPDocumentIssueOrgan': '–û—Ä–≥–∞–Ω, –≤—ã–¥–∞–≤—à–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è',
      'agentPhone': '–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è',
      'agentEmail': 'Email –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è',
      'agentSNILS': '–°–ù–ò–õ–° –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è',
      'agentKind': '–í–∏–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è',
    };
  
    return sourceMappings[source] || source;
  };
  

  return (
    <div className="process-info">
      <div className="info-column">
        <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —ç—Ç–∞–ø–∞—Ö BPMN:</h2>
        <div className="filters">
          <label>
            –§–∏–ª—å—Ç—Ä:
            <select value={filter} onChange={handleFilterChange}>
              <option value="all">–í—Å–µ</option>
              <option value="bpmn:UserTask">User Tasks</option>
              <option value="bpmn:ServiceTask">Service Tasks</option>
              <option value="bpmn:StartEvent">Start Events</option>
              <option value="bpmn:CallActivity">call Activity</option>
            </select>
          </label>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ —ç—Ç–∞–ø–æ–≤"
            value={searchTerm}
            onChange={handleSearch}
          />
        </div>
        <div className="task-table">
          <TableContainer component={Paper}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>–¢–∏–ø</TableCell>
                  <TableCell>–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {searchedTasks.map((task) => (
                  <TableRow key={task.id} onClick={() => setSelectedTask(task)}>
                    <TableCell>
                      {task.type === 'bpmn:UserTask' ? (
                        <span role="img" aria-label="User Task">üë®üèº‚Äçüíº</span>
                      ) : task.type === 'bpmn:ServiceTask' ? (
                        <span role="img" aria-label="Service Task">‚öôÔ∏è</span>
                      ) : task.type === 'bpmn:CallActivity' ? (
                        <span role="img" aria-label="Call Activity">üß†</span>
                      ) : (
                        <span role="img" aria-label="Start Event">‚≠ê</span>
                      )}
                    </TableCell>
                    <TableCell>{task.name}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </div>
        <button onClick={exportTasks} className="export-button">–≠–∫—Å–ø–æ—Ä—Ç —ç—Ç–∞–ø–æ–≤</button>
      </div>

      {selectedTask && (
        <div className="details-column">
          <div className="task-details">
            <h3>–î–µ—Ç–∞–ª–∏ —ç—Ç–∞–ø–∞:</h3>
            <p>–ò–º—è: {selectedTask.name}</p>
            <p>–¢–∏–ø: {selectedTask.type}</p>
            <p>ID: {selectedTask.additionalId}</p>
            <p>Process ID: {selectedTask.processId}</p>
            <div class="button-container">
            <button
                onClick={() => handleButtonClick(1)}
                style={{
                  display: 'block',
                  marginBottom: '10px',
                  padding: '10px 20px',
                  fontSize: '16px',
                  cursor: 'pointer',
                  textAlign: 'center',
                  textDecoration: 'none',
                  border: '1px solid #ccc',
                  borderRadius: '5px',
                  backgroundColor: button1Active ? '#28a745' : '#dc3545', 
                  color: '#fff',
                  boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1), 0px 1px 3px rgba(0, 0, 0, 0.08)',
                  transition: 'box-shadow 0.3s ease, background-color 0.3s ease',
                  position: 'relative',
                }}
              >
                –ê–∫—Ç–∏–≤
                {button1Active && (
                  <span
                    className="lamp"
                    style={{
                      display: 'inline-block',
                      width: '10px',
                      height: '10px',
                      borderRadius: '50%',
                      marginLeft: '5px',
                      backgroundColor: '#fff',
                      boxShadow: '0 0 10px rgba(0, 255, 0, 0.5)', // –ó–µ–ª–µ–Ω–∞—è –ª–∞–º–ø–æ—á–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                      transition: 'background-color 0.3s ease, box-shadow 0.3s ease',
                      position: 'absolute',
                      top: '50%',
                      transform: 'translateY(-50%)',
                    }}
                  />
                )}
              </button>
              <button onClick={exportTasks} className="button2">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ú–í</button>
            </div>
            {selectedTask.type === 'bpmn:CallActivity' && (
              <div className="call-activity-ids">
                <h4>–ú–µ–∂–≤–µ–¥—ã:</h4>
                {Object.entries(callActivityVariableIds).map(([callActivityId, variableData]) => (
                  <div key={callActivityId}>
                    <p>CallActivity ID: {callActivityId}</p>
                    <div>
                      <p>–ü–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –º–µ–∂–≤–µ–¥ (activiti:in):</p>
                      {variableData.inVariables && variableData.inVariables.length > 0 ? (
                        <Paper sx={{ width: '100%', overflow: 'hidden' }}>
                          <TableContainer sx={{ maxHeight: 440 }}>
                            <Table stickyHeader aria-label="sticky table">
                              <TableHead>
                                <TableRow>
                                  <TableCell>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è</TableCell>
                                  <TableCell>–ò—Å—Ç–æ—á–Ω–∏–∫(ID –ø–æ–ª—è)</TableCell>
                                  <TableCell>–ú–µ–∂–≤–µ–¥(ID –ø–æ–ª—è –ú–í)</TableCell>
                                </TableRow>
                              </TableHead>
                              <TableBody>
                                {variableData.inVariables.map((variable) => {
                                  let fieldName;
                                  switch (variable.source) {
                                    case 'executorkey_OKTMO':
                                      fieldName = '–û–ö–¢–ú–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è';
                                      break;
                                    case 'declarantType':
                                      fieldName = '–¢–∏–ø –∑–∞—è–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'organizationOPF':
                                      fieldName = '–û–ü–§ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏';
                                      break;
                                    case 'organizationINN':
                                      fieldName = '–ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏';
                                      break;
                                    case 'organizationOGRN':
                                      fieldName = '–û–ì–†–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏';
                                      break;
                                    case 'organizationEmail':
                                      fieldName = 'Email –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏';
                                      break;
                                    case 'organizationPhone':
                                      fieldName = '–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏';
                                      break;
                                    case 'declPersonFIOSurname':
                                      fieldName = '–§–∞–º–∏–ª–∏—è –∑–∞—è–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'declPersonFIOFirst':
                                      fieldName = '–ò–º—è –∑–∞—è–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'declPersonFIOPatronymic':
                                      fieldName = '–û—Ç—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'declPersonEmail':
                                      fieldName = 'Email –∑–∞—è–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'declPersonPhone':
                                      fieldName = '–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞—è–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'declPersonSNILS':
                                      fieldName = '–°–ù–ò–õ–° –∑–∞—è–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'doc_applicantIdentity_type2':
                                      fieldName = '–ö–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'declPersonPDocumentSeries':
                                      fieldName = '–°–µ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'declPersonPDocumentNumber':
                                      fieldName = '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'declPersonPDocumentDate':
                                      fieldName = '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'declPersonPDocumentIssueOrgan':
                                      fieldName = '–û—Ä–≥–∞–Ω, –≤—ã–¥–∞–≤—à–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞—è–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'flagRepresentative':
                                      fieldName = '–Ø–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º';
                                      break;
                                    case 'agentFIOSurname':
                                      fieldName = '–§–∞–º–∏–ª–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'agentFIOFirst':
                                      fieldName = '–ò–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'agentFIOPatronymic':
                                      fieldName = '–û—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'agentPDocumentSeries':
                                      fieldName = '–°–µ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'agentPDocumentNumber':
                                      fieldName = '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'agentPDocumentDate':
                                      fieldName = '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'agentPDocumentIssueOrgan':
                                      fieldName = '–û—Ä–≥–∞–Ω, –≤—ã–¥–∞–≤—à–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'agentPhone':
                                      fieldName = '–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'agentEmail':
                                      fieldName = 'Email –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'agentSNILS':
                                      fieldName = '–°–ù–ò–õ–° –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'agentKind':
                                      fieldName = '–í–∏–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è';
                                      break;
                                    case 'LP_data_INN':
                                      fieldName = '–ò–ù–ù –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞';
                                      break;
                                    case 'LP_data_OGRN':
                                      fieldName = '–û–ì–†–ù –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞';
                                      break;
                                      case 'rq_paymentsExportConditions':
                                      fieldName = '–£—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π';
                                      break;
                                    case 'payerType':
                                      fieldName = '–¢–∏–ø –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞';
                                      break;
                                    case 'INN':
                                      fieldName = '–ò–ù–ù';
                                      break;
                                      case 'phone':
                                      fieldName = '–¢–µ–ª–µ—Ñ–æ–Ω';
                                      break;
                                    default:
                                      fieldName = mapSourceToFieldName(variable.additionalField);
                                      break;
                                  }
                                  return (
                                    <TableRow key={`${variable.source}-${variable.target}`}>
                                      <TableCell>{fieldName}</TableCell>
                                      <TableCell>{variable.source}</TableCell>
                                      <TableCell>{variable.target}</TableCell>
                                    </TableRow>
                                  );
                                })}
                              </TableBody>

                            </Table>
                          </TableContainer>
                        </Paper>
                      ) : (
                        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>
                      )}
                    </div>
                    <div>
                      <p>–ü–æ–ª—è –∏—Å—Ö–æ–¥—è—â–∏–µ –∏–∑ –º–µ–∂–≤–µ–¥–∞ (activiti:out):</p>
                      {variableData.outVariables && variableData.outVariables.length > 0 ? (
                        <Paper sx={{ width: '100%', overflow: 'hidden' }}>
                          <TableContainer sx={{ maxHeight: 440 }}>
                            <Table stickyHeader aria-label="sticky table">
                              <TableHead>
                                <TableRow>
                                  <TableCell>–ú–µ–∂–≤–µ–¥</TableCell>
                                  <TableCell>–¢–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç</TableCell>
                                </TableRow>
                              </TableHead>
                              <TableBody>
                                {variableData.outVariables.map((variable) => (
                                  <TableRow key={`${variable.source}-${variable.target}`}>
                                    <TableCell>{variable.source}</TableCell>
                                    <TableCell>{variable.target}</TableCell>
                                  </TableRow>
                                ))}
                              </TableBody>
                            </Table>
                          </TableContainer>
                        </Paper>
                      ) : (
                        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}

            {startEventFormProperties.length > 0 && (
              <div className="start-event-form-properties">
                <h4>–ü–æ–ª—è:</h4>
                {startEventFormProperties && startEventFormProperties.length > 0 ? (
                  <Paper sx={{ width: '100%', overflow: 'hidden' }}>
                    <TableContainer sx={{ maxHeight: 440 }}>
                      <Table stickyHeader aria-label="sticky table">
                        <TableHead>
                          <TableRow>
                            <TableCell>ID</TableCell>
                            <TableCell>Name</TableCell>
                            <TableCell>Type</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {startEventFormProperties.map((formProperty) => (
                            <TableRow key={formProperty.id}>
                              <TableCell>{formProperty.id}</TableCell>
                              <TableCell>{formProperty.name}</TableCell>
                              <TableCell>{formProperty.type}</TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </Paper>
                ) : (
                  <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>
                )}
              </div>
            )}

            <button onClick={clearSelectedTask}>–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProcessInfo;
